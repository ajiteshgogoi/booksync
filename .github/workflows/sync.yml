name: Kindle Highlights Sync

on:
  # Process parsed files every 5 minutes
  schedule:
    - cron: '*/5 * * * *'
  # Also process immediately after parsing completes
  workflow_run:
    workflows: ["Parse Highlights"]
    types:
      - completed
  workflow_dispatch:  # Allow manual trigger

permissions:
  actions: write
  checks: write
  contents: read
  deployments: write
  id-token: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

env:
  NODE_ENV: production
  GITHUB_ACTIONS: true
  R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
  R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
  R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
  NOTION_OAUTH_CLIENT_ID: ${{ secrets.NOTION_OAUTH_CLIENT_ID }}
  NOTION_OAUTH_CLIENT_SECRET: ${{ secrets.NOTION_OAUTH_CLIENT_SECRET }}
  NOTION_REDIRECT_URI: ${{ secrets.NOTION_REDIRECT_URI }}

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 hour timeout

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci --include=dev

      - name: Build server
        run: |
          cd server
          npm run build
          
      - name: Process Parsed Jobs
        run: |
          cd server
          node --experimental-vm-modules -e "
          (async () => {
            try {
              console.log('Importing modules...');
              const { queueService } = await import('./build/src/services/queueService.js');
              const { workerService } = await import('./build/src/services/workerService.js');
              const { jobStateService } = await import('./build/src/services/jobStateService.js');
              const { storageCleanupService } = await import('./build/src/services/storageCleanupService.js');
              
              console.log('Looking for jobs in parsed state...');
              const jobs = await jobStateService.listJobsByState('parsed');
              console.log(`Found ${jobs.length} jobs in parsed state`);
              
              // Add parsed jobs to queue if not already queued
              for (const job of jobs) {
                if (!(await queueService.isUserActive(job.userId))) {
                  await queueService.addToQueue(job.jobId, job.userId);
                  console.log(`Added job ${job.jobId} to queue`);
                }
              }
              
              if (jobs.length > 0) {
                console.log('Starting worker to process jobs...');
                await workerService.start();
                
                // Verify final states
                for (const job of jobs) {
                  const finalState = await jobStateService.getJobState(job.jobId);
                  if (!finalState || (finalState.state !== 'completed' && finalState.state !== 'failed')) {
                    throw new Error(`Job ${job.jobId} did not reach final state. Current state: ${finalState?.state}`);
                  }
                  console.log(`Job ${job.jobId} reached final state: ${finalState.state}`);
                }
                
                console.log('Worker completed successfully');
              } else {
                console.log('No jobs to process');
              }
              
              // Run cleanup service
              console.log('Running storage cleanup...');
              await storageCleanupService.runCleanupCycle();
              console.log('Cleanup completed');
              
              process.exit(0);
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          })();
          "
