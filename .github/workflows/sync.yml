name: Kindle Highlights Sync

on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs on new trigger
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 hour timeout

    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      NOTION_OAUTH_CLIENT_ID: ${{ secrets.NOTION_OAUTH_CLIENT_ID }}
      NOTION_OAUTH_CLIENT_SECRET: ${{ secrets.NOTION_OAUTH_CLIENT_SECRET }}
      NOTION_REDIRECT_URI: ${{ secrets.NOTION_REDIRECT_URI }}
      NODE_ENV: production

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clear npm cache and install dependencies
        run: |
          cd server
          npm cache clean --force
          npm ci

      - name: Build and run worker
        run: |
          cd server
          # Build TypeScript files
          echo "Building server..."
          npm run build
          echo "Build complete"

          # Set environment variables for GitHub Actions
          export MAX_RUNTIME='18000000'  # 5 hours
          export JOB_TIMEOUT='3600000'   # 1 hour
          export BATCH_SIZE='25'         # Match syncService.ts GitHub Actions batch size
          export MAX_HIGHLIGHTS_PER_RUN='1000'  # Match syncService.ts GitHub Actions limit

          echo "Starting worker process..."
          node --experimental-vm-modules -e "
          (async () => {
            try {
              console.log('Importing worker module...');
              const { startWorker } = await import('./build/src/worker.js');
              console.log('Worker module imported successfully');
              
              process.env.MAX_RUNTIME = '18000000';  // 5 hours
              process.env.JOB_TIMEOUT = '3600000';   // 1 hour
              process.env.BATCH_SIZE = '25';         // Match syncService.ts GitHub Actions batch size
              process.env.MAX_HIGHLIGHTS_PER_RUN = '1000';  // Match syncService.ts GitHub Actions limit
              
              console.log('Starting worker with environment:', {
                MAX_RUNTIME: process.env.MAX_RUNTIME,
                JOB_TIMEOUT: process.env.JOB_TIMEOUT,
                BATCH_SIZE: process.env.BATCH_SIZE,
                MAX_HIGHLIGHTS_PER_RUN: process.env.MAX_HIGHLIGHTS_PER_RUN
              });
              
              await startWorker();
              console.log('Worker completed successfully');
            } catch (error) {
              console.error('Failed to run worker:', error);
              process.exit(1);
            }
          })();"