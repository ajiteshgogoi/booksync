name: Kindle Highlights Sync

on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs on new trigger
concurrency:
  group: 'kindle-sync'
  cancel-in-progress: true

permissions:
  actions: write
  checks: write
  contents: read
  deployments: write
  id-token: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

env:
  REDIS_URL: ${{ secrets.REDIS_URL }}
  NOTION_OAUTH_CLIENT_ID: ${{ secrets.NOTION_OAUTH_CLIENT_ID }}
  NOTION_OAUTH_CLIENT_SECRET: ${{ secrets.NOTION_OAUTH_CLIENT_SECRET }}
  NOTION_REDIRECT_URI: ${{ secrets.NOTION_REDIRECT_URI }}
  NODE_ENV: production

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 hour timeout

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Clear npm cache and install dependencies
        run: |
          cd server
          npm cache clean --force
          npm ci

      - name: Build server
        run: |
          cd server
          # Build TypeScript files
          echo "Building server..."
          npm run build
          echo "Build complete"

      - name: Initialize Redis and run worker
        run: |
          cd server
          echo "Initializing Redis connection pool and starting worker..."
          node --experimental-vm-modules -e "
          (async () => {
            try {
              console.log('Importing modules...');
              const { RedisService } = await import('./build/src/services/redisService.js');
              const { startWorker } = await import('./build/src/worker.js');
              
              console.log('Initializing Redis...');
              global.redisService = await RedisService.init();
              
              console.log('Starting worker...');
              await startWorker();
              console.log('Worker completed successfully');
              process.exit(0);
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          })();
          "

      - name: Cleanup Redis connection
        if: always()
        run: |
          cd server
          echo "Cleaning up Redis connection..."
          node --experimental-vm-modules -e "
          (async () => {
            try {
              if (global.redisService) {
                await RedisService.cleanup();
                console.log('Redis connection cleaned up');
              }
              process.exit(0);
            } catch (error) {
              console.error('Error during Redis cleanup:', error);
              process.exit(1);
            }
          })();
          "
