name: Process Highlights

on:
  repository_dispatch:
    types: 
      - process_highlights
      - process_highlights_test

permissions:
  contents: read
  actions: write

jobs:
  process-highlights:
    if: github.event.action == 'process_highlights'
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 1 hour timeout for file processing

    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      NOTION_OAUTH_CLIENT_ID: ${{ secrets.NOTION_OAUTH_CLIENT_ID }}
      NOTION_OAUTH_CLIENT_SECRET: ${{ secrets.NOTION_OAUTH_CLIENT_SECRET }}
      NOTION_REDIRECT_URI: ${{ secrets.NOTION_REDIRECT_URI }}
      GITHUB_ACTIONS: true
      NODE_ENV: production
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}

    steps:
      - name: Log Full Event Details
        run: |
          echo "=== Full Event Details ==="
          echo 'Event type: ${{ github.event.action }}'
          echo 'Has client payload: ${{ github.event.client_payload != null }}'
          echo 'Has fileContent: ${{ github.event.client_payload.fileContent != null }}'
          echo 'Has userId: ${{ github.event.client_payload.userId != null }}'
          echo 'Has databaseId: ${{ github.event.client_payload.databaseId != null }}'
          echo "=========================="

      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: server
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "Dependencies installed"

      - name: Build
        working-directory: server
        run: |
          echo "Building server..."
          npm run build
          echo "Build complete"

      - name: Reset Redis Connections
        working-directory: server
        run: |
          echo "Resetting Redis connections..."
          node resetRedis.js

      - name: Process File
        if: success()
        working-directory: server
        env:
          FILE_CONTENT: ${{ github.event.client_payload.fileContent }}
          FILE_NAME: ${{ github.event.client_payload.fileName }}
          R2_FILE_NAME: ${{ github.event.client_payload.fileName }}
          DEBUG: 'true'
          NODE_OPTIONS: '--trace-warnings'
        run: |
          echo "Environment Check:"
          echo "- FILE_CONTENT length: ${#FILE_CONTENT}"
          echo "- FILE_NAME: $FILE_NAME"
          echo "- R2 Config Status:"
          echo "  - ENDPOINT: ${R2_ENDPOINT:+configured}"
          echo "  - ACCESS_KEY: ${R2_ACCESS_KEY_ID:+configured}"
          echo "  - SECRET_KEY: ${R2_SECRET_ACCESS_KEY:+configured}"
          echo "  - BUCKET: ${R2_BUCKET_NAME:+configured}"
          echo "- Redis URL Status: ${REDIS_URL:+configured}"
          echo "Starting file processing..."
          set -o pipefail
          node --experimental-vm-modules processHighlights.js 2>&1 | tee process.log
          echo "Process log:"
          cat process.log

      - name: Cleanup Redis
        if: always()
        working-directory: server
        run: |
          echo "Cleaning up Redis connections..."
          node --experimental-vm-modules -e "
          (async () => {
            try {
              const { redisPool, RedisService } = await import('./build/src/services/redisService.js');
              await RedisService.cleanup();
              await redisPool.cleanup();
              console.log('Redis connections cleaned up');
            } catch (error) {
              console.error('Error during Redis cleanup:', error);
            }
          })();
          "

  test-webhook:
    if: github.event.action == 'process_highlights_test'
    runs-on: ubuntu-latest
    steps:
      - name: Log Test Event
        run: |
          echo "=== Webhook Test Event Details ==="
          echo "Event type: ${{ github.event.action }}"
          echo "Client Payload:"
          echo "- Has fileContent: ${{ github.event.client_payload.fileContent != null }}"
          if [ -n "${{ github.event.client_payload.fileContent }}" ]; then
            echo "- fileContent is present"
          else
            echo "- fileContent is empty"
          fi
          echo "- Using default fileName: My Clippings.txt"
          echo "Full payload: ${{ toJSON(github.event.client_payload) }}"
      
      - name: Verify Required Secrets
        run: |
          echo "=== Required Secrets Check ==="
          echo "R2 Configuration:"
          echo "- R2_ENDPOINT: ${{ secrets.R2_ENDPOINT != '' }}"
          echo "- R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID != '' }}"
          echo "- R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY != '' }}"
          echo "- R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME != '' }}"
          
      - name: Return Success
        run: |
          echo "âœ… Webhook test completed"
          echo "Run process_highlights action to process files"
